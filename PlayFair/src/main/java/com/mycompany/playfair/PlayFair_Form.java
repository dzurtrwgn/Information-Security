/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.playfair;

/**
 *
 * @author DzurTrwgn
 */
public class PlayFair_Form extends javax.swing.JFrame {

    /**
     * Creates new form PlayFair_Form
     */
    public PlayFair_Form() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPlainText = new javax.swing.JTextField();
        btnmahoa = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btngiaima = new javax.swing.JButton();
        txtCipherText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel1.setText("Thuật Toán Mã Hóa Play Fair Cipher");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("PlainText:");

        txtPlainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlainTextActionPerformed(evt);
            }
        });

        btnmahoa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnmahoa.setText("Encryption");
        btnmahoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmahoaActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Cipher Text:");

        btngiaima.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btngiaima.setText("Decryption");
        btngiaima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btngiaimaActionPerformed(evt);
            }
        });

        txtCipherText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCipherTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPlainText)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCipherText, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(btnmahoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btngiaima)
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtPlainText, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnmahoa)
                    .addComponent(btngiaima))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtCipherText, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPlainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlainTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPlainTextActionPerformed

    private void btnmahoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmahoaActionPerformed
        // TODO add your handling code here:
        String plainText="", plainTxt,cipherText="";
        String playFairMatrix[][]= {
            {"M","O","N","A","R"},
            {"C","H","Y","B","D"},
            {"E","F","G","I","K"},
            {"L","P","Q","S","T"},
            {"U","V","W","X","Z"},
                    };
        System.out.println("Enter a plaintext:");
        plainTxt = txtPlainText.getText();
        String temp="";
        String arr[]=plainTxt.split(" ");
        for (int j=0;j<arr.length;j++){
            temp=arr[j];
            if(temp.length()%2!=0){
                temp=temp+"x";
            }
            plainText=plainText+temp+" ";
        }
        
        for (int i=0; i<plainText.length(); i+=2){
            char c = plainText.charAt(i);
            if (i+1<plainText.length()){
                char d = plainText.charAt(i);
                if (i+1<plainText.length()){
                    d=plainText.charAt(i+1);
                }
                
                String val = String.valueOf(c);
                String vald = String.valueOf(d);
                String index1,index2;
                if (val.equals(" ")){
                    cipherText=cipherText+" ";
                    i--;
                    continue;
                }
                else {
                    if(val.equalsIgnoreCase("J")){
                        index1=findIndex(playFairMatrix,String.valueOf("I"));
                    }
                    else {
                        index1=findIndex(playFairMatrix,String.valueOf(plainText.charAt(i)));
                    }
                    if(vald.equalsIgnoreCase("J")){
                        index2=findIndex(playFairMatrix,String.valueOf("I"));
                    }
                    else {
                        index2=findIndex(playFairMatrix,String.valueOf(plainText.charAt(i+1)));
                    }
                    if (index1.charAt(0) == index2.charAt(0)){
                        int m= Integer.parseInt(String.valueOf(index1.charAt(1)));
                        int n= Integer.parseInt(String.valueOf(index2.charAt(1)));
                        int o= Integer.parseInt(String.valueOf(index1.charAt(0)));
                        int p= Integer.parseInt(String.valueOf(index2.charAt(0)));
                        if (m==4){
                        m=-1;
                        }
                        if (n==4){
                            n=-1;
                        }
                        cipherText=cipherText+playFairMatrix[o][m+1];
                        cipherText=cipherText+playFairMatrix[p][n+1];
                    }
                    else if (index1.charAt(1) == index2.charAt(1)) {
                        int o = Integer.parseInt(String.valueOf(index1.charAt(0)));
                        int m = Integer.parseInt(String.valueOf(index1.charAt(1)));
                        int p = Integer.parseInt(String.valueOf(index2.charAt(0)));
                        int n = Integer.parseInt(String.valueOf(index2.charAt(1)));
                        if (p>3) {
                            p=-1;
                        }
                        if (o>3) {
                            o=-1;
                        }
                        cipherText = cipherText + playFairMatrix[o+1][m];
                        cipherText = cipherText + playFairMatrix[p+1][n];
                    } 
                }
                System.out.println("The Cipher Text Of The Above Plain Text is: ");
                System.out.println(cipherText);
                txtCipherText.setText(cipherText.toString().toUpperCase());
            }
        }
  
  
    }//GEN-LAST:event_btnmahoaActionPerformed

    private void btngiaimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btngiaimaActionPerformed
        // TODO add your handling code here:
        String plainText="", plainTxt,cipherText="";
        String playFairMatrix[][]= {
            {"M","O","N","A","R"},
            {"C","H","Y","B","D"},
            {"E","F","G","I","K"},
            {"L","P","Q","S","T"},
            {"U","V","W","X","Z"},
                    };
        System.out.println("Enter a Ciphertext:");
        cipherText = txtCipherText.getText();
        txtCipherText.setText(cipherText.toString().toUpperCase());
        for (int i=0; i<cipherText.length(); i+=2){
            char c=cipherText.charAt(i);
            char d = cipherText.charAt(i);
            if (i+1 < cipherText.length()){
                d=cipherText.charAt(i+1);
            }
            String val = String.valueOf(c);
            String vald = String.valueOf(d);
            String index1,index2;
            if (val.equals(" ")) {
                plainText=plainText+" ";
                i--;
                continue;
            }
            else if (val.equalsIgnoreCase("J")) {
                index1=findIndex(playFairMatrix,String.valueOf("I"));
            }
            else {
                index1 = findIndex(playFairMatrix,String.valueOf(cipherText.charAt(i)));
            }
            if (vald.equalsIgnoreCase("J")){
                index2=findIndex(playFairMatrix,String.valueOf("I"));
            }
            else {
                index2=findIndex(playFairMatrix, String.valueOf(cipherText.charAt(i+1)));
            }
            if (index1.charAt(0) == index2.charAt(0)){
                int m= Integer.parseInt(String.valueOf(index1.charAt(1)));
                int n= Integer.parseInt(String.valueOf(index2.charAt(1)));
                int o= Integer.parseInt(String.valueOf(index1.charAt(0)));
                int p= Integer.parseInt(String.valueOf(index2.charAt(0)));
                if (m==0){
                    m=5;
                }
                if (n==0){
                    n=5;
                }
                plainText=plainText+playFairMatrix[o][m-1];
                plainText=plainText+playFairMatrix[p][n-1];
            }
            else if (index1.charAt(1) == index2.charAt(1)){
                int o= Integer.parseInt(String.valueOf(index1.charAt(0)));
                int m= Integer.parseInt(String.valueOf(index1.charAt(1)));
                int p= Integer.parseInt(String.valueOf(index2.charAt(0)));
                int n= Integer.parseInt(String.valueOf(index2.charAt(1)));
                if (p==0){
                    p=5;
                }
                if (o==0) {
                    o=5;
                }
                plainText=plainText+playFairMatrix[o-1][m];
                plainText=plainText+playFairMatrix[p-1][n];
            }
            else {
                int o= Integer.parseInt(String.valueOf(index1.charAt(0)));
                int m= Integer.parseInt(String.valueOf(index1.charAt(1)));
                int p= Integer.parseInt(String.valueOf(index2.charAt(0)));
                int n= Integer.parseInt(String.valueOf(index2.charAt(1)));
                plainText=plainText+playFairMatrix[o][n];
                plainText=plainText+playFairMatrix[p][m];
            }
        }
        System.out.println("Plaintext Text Of The Above Cipher Text is: ");
        System.out.println(plainText);
        txtPlainText.setText(plainText.toString().toUpperCase());
                                             

     
    }//GEN-LAST:event_btngiaimaActionPerformed

    public static String findIndex(String[][] arr, String test){
    String index = "";
    for (int i=0; i<arr.length; i++){
        for (int j=0;j<arr.length;j++) {
            if(test.equalsIgnoreCase(arr[i][j])){
                index = String.valueOf(i) + String.valueOf(j);
                return index;
            }
        }
    }
    return null;
}
    
    private void txtCipherTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCipherTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCipherTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayFair_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayFair_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayFair_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayFair_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PlayFair_Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btngiaima;
    private javax.swing.JButton btnmahoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtCipherText;
    private javax.swing.JTextField txtPlainText;
    // End of variables declaration//GEN-END:variables
}
